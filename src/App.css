:root {
  --toggler-button-height: 2rem;
  --toggler-button-width: var(--toggler-button-height);

  --slightly-brighten: rgb(255, 255, 255, .25);

  /* theme */
  --root-dark-bg: #111;
  --root-light-bg: #ccc;
  color-scheme: light;
  background-color: var(--root-light-bg);
  color: black;

  &:has(.dark-theme) {
    color-scheme: dark;
    background-color: var(--root-dark-bg);
    color: white;
  }
}

html, body {
  margin: 0;
  padding: 0;
}

/* ul styled as div; used for semantic purposes */
ul {
  padding: 0;
  list-style: none;
  margin: 0;
}

.flex-container, .column-stretch-container, .row-container, .column-container, .main-with-others-grouped-row-container {
  display: flex;
  gap: 1rem;
  * {
    margin: 0; /* gap used instead of margin */
  }
}
.flex-container {
  align-items: center;
}
.column-stretch-container {
  flex-flow: column nowrap;
  align-items: stretch;
}
.row-container {
  flex-flow: row wrap;
  justify-content: center;
}
.column-container {
  flex-flow: column nowrap;
  align-items: center;
}
.main-with-others-grouped-row-container {
  /* main item takes all the space, hence others become groups */
  align-items: center;
  > .main-item {
    flex-grow: 1;
  }
  > *:not(.main-item) {
    flex-shrink: 0; /* flex-grow can cause siblings to shrink */
  }
}

.sun-color {
  color: yellow;
}
.moon-color {
  color: gray;
}

.toggler-icon-only {
  box-sizing: border-box; /* it might have padding set by UA */
  width: var(--toggler-button-height);
  aspect-ratio: 1;
  font-size: 1rem !important;
}
.toggler-text-and-icon {
  display: flex;
  align-items: center;
  gap: .5rem;
}
.toggler-transition {
  background-color: transparent;
  border: 0; /* background will be transparent */
  transition: background-color .2s;
  border-radius: .25rem;

  &:hover {
    background-color: var(--slightly-brighten);
  }
}

.unselectable {
  user-select: none !important;
}

.styled-as-p {
  font-size: inherit;
  font-weight: normal;
}

#root {
  display: grid;
  grid-template-rows: auto 1fr auto; /* header - main - footer */
  min-height: 100dvh; /* avoiding unnecessary space with dynamic vh */
}

#checklist, #visualizer, #home, #top-header {
  *:not(h1, h2, h3, h4, h5, h6) {
    font-size: inherit; /* some have values set by user agent, which overwrites inheritance */
  }
}

#top-header {
  padding: 1rem;
  border-bottom: 1rem solid black;
  font-size: 1rem;
  
  /* if background is dark become darker, if light become lighter */
  background-color: rgb(255, 0, 255, .5);

  > .main-item {
    /* text gets all the space, grouping siblings */
    text-align: end;
  }
}
#logo {
  a {
    color: inherit;
    text-decoration: none;
  }
}
#theme-toggler {
  height: var(--toggler-button-height);
  box-sizing: border-box; /* padding by UA should respect the height */
}

main {
  position: relative;
}

#menu {
  width: fit-content;
  height: 100%;
  padding: 1rem;
  box-sizing: border-box; /* height must not be bigger than 100%, otherwise it would overflow */
  overflow-y: auto;
  position: absolute;
  top: 0;
  text-align: center;
  
  --indigo-as-hsl: 240, 20%;
  background-color: hsl(var(--indigo-as-hsl), 60%);

  z-index: 10; /* there are other positioned elements, menu should always be on top */

  li {
    padding: 0 .25rem;

    background-color: white; /* light-theme */
  }
  .dark-theme & {
    background-color: hsl(var(--indigo-as-hsl), 35%);
    li {
      background-color: black;
    }
  }

  .place-content-at-the-end {
    order: 10;
    flex-grow: 1;
    display: flex;
    flex-flow: column nowrap;
    gap: 1rem;
    justify-content: end;
    align-items: stretch;
  }
}

/* hero section */
#checklist, #visualizer, #home {
  width: 90%;
  min-width: min-content; /* if anything overflows, contain them */
  padding: 1rem 0;
  margin: 0 auto; /* horizontally centered */
  max-width: 1000px;
  text-align: center;
  font-size: 1.25rem;

  h1 {
    font-size: 1.25em;
  }
}

#checklist {
  #todos {
    width: 100%; /* flex-items don't automatically use widths of their parents */

    --text-input-size: 10ch;
    --checkbox-input-size: 1.5rem;

    input[type="checkbox"] {
      width: var(--checkbox-input-size);
      aspect-ratio: 1;
    }
    input[type="time"] {
      max-width: var(--text-input-size); /* only hours and minutes allowed, though some UAs make it big enough for milliseconds */
    }
    input[type="text"], input[type="number"] {
      width: var(--text-input-size);
    }

    /* calculating the width of the biggest input, helpful to reduce unnecessary space */
    /* specifically search inside the container so that inputs inside helper menu are ignored */
    &:has(.main-with-others-grouped-row-container input[type="checkbox"]) {
      --biggest-input-size: var(--checkbox-input-size);
    }
    &:has(.main-with-others-grouped-row-container input:is([type="text"], [type="number"], [type="time"])) {
      --biggest-input-size: var(--text-input-size) + 2rem; /* 2rem added since ch is dynamic and bordex-box isn't used */
    }
    /* gap + input + gap + button */
    --biggest-helper-wrapper-size: (1rem + var(--biggest-input-size) + 1rem + var(--toggler-button-width));
  }

  .todo {
    width: 100%; /* every to-do is the same size instead of fit-content */
    p, h1, h2, h3, h4, h5, h6 {
      overflow-wrap: anywhere; /* instead of overflowing or enlarging the width, enlarge the height since it's the flow direction */
    }
    padding: .5rem;
    box-sizing: border-box; /* shouldn't be > 100%, otherwise overflows */
    
    /* if background is dark become darker, if light become lighter */
    background-color: rgb(255, 40, 40, .5);

    .main-with-others-grouped-row-container {
      width: 100%; /* for children to be placed correctly and consistent with other todos */
      flex-flow: row nowrap;
      justify-content: space-between;

      > .main-item {
        /* if all items don't use the same width, items will be misaligned */
        width: calc(100% - var(--biggest-helper-wrapper-size)); /* place the wrapper, then give the remaining space to main-items */
        flex-grow: 0; /* shouldn't be bigger than the fixed with */
      }
    }

    .frequency-menu-wrapper {
      position: relative; /* for child alignment */

      .frequency-menu {
        --padding-frequency-toggler-label: .25rem;
        --height-of-frequency-toggler-label: calc(var(--padding-frequency-toggler-label) * 2 + max(1rem, var(--checkbox-input-size)));

        display: flex;
        flex-direction: column;
        &.over-the-button {
          flex-direction: column-reverse;
        }
        
        overflow-y: auto; /* show vertical scrollbar */
        scrollbar-gutter: stable; /* assume the scrollbar width otherwise Firebox ignores it */
        max-height: calc(5 * var(--height-of-frequency-toggler-label)); /* only show 5 elements */
        
        align-items: stretch; /* make sure elements line up */
        .frequency-toggler-label {
          width: 100%; /* get the full width of the alignment container */
          box-sizing: border-box; /* don't be bigger than your parent */
          padding: var(--padding-frequency-toggler-label);

          justify-content: space-between; /* make sure elements line up */
        }
        
        /* centralize the menu and put it under or on top of the button */
        position: absolute;
        left: 50%;
        translate: -50%;
        top: 100%;
        &.over-the-button {
          top: unset;
          bottom: 100%;
        }
        z-index: 1; /* there are other positioned elements, menu should be on top */

        /* theme */
        background-color: var(--root-light-bg);
        border: 1px solid var(--root-dark-bg);
        .dark-theme & {
          background-color: var(--root-dark-bg);
          border: 1px solid var(--root-light-bg);
        }
      }
    }
  }
}
/* on small devices, give up alignment to avoid main-text having narrow space due to big fixed-width */
@media (max-width: 500px) {
  #checklist .todo .main-with-others-grouped-row-container {
    flex-flow: row wrap;
    justify-content: center;

    > .main-item {
      width: auto;
      flex-grow: 1; /* get the remaining space after other elements are placed */
    }
  }
}

#visualizer {
  .day {
    padding: .25rem;
    
    border: 1px solid black;
    .dark-theme & {
      border-color: white;
    }
  }

  .checked {
    color: green;
  }
  .unchecked {
    color: red;
  }
}

#home {
  * {
    margin: 0; /* padding used, margin unnecessary */
  }
}

footer {
  background-color: black;
  height: 1rem;
}

@media (prefers-reduced-motion) {
  .toggler-transition {
    transition: none !important;
  }
}